2007-12-30  Samuel Thibault  <samuel.thibault@ens-lyon.org>

	* linux/dev/glue/block.c (MAX_BUF): Set to sane stack-friendly 8
	instead of blindly following VM_MAP_COPY_PAGE_LIST_MAX.
	* vm/vm_map.h (VM_MAP_COPY_PAGE_LIST_MAX): Increase to 64.
	* vm/vm_pageout.h (VM_PAGE_EXTERNAL_LIMIT): Increase to 2/3 free memory.
	(VM_PAGE_EXTERNAL_TARGET): Increase to 1/2 free memory.

2007-08-20  Samuel Thibault  <samuel.thibault@ens-lyon.org>

	* vm/vm_object.c (vm_object_cached_max): Increase from 200 to 2000.

2005-05-11  Neal H. Walfield  <neal@cs.uml.edu>

	* kern/mach_param.h (THREAD_MAX, TASK_MAX, ACT_MAX,
	ACTPOOL_MAX): Make them 64 times bigger.
	* kern/zalloc.c (zone_map_size): Increase from 12 to 16 MiB.


Index: kern/mach_param.h
===================================================================
--- kern/mach_param.h.orig	2001-04-05 09:39:20.000000000 +0300
+++ kern/mach_param.h	2007-04-05 07:31:10.000000000 +0300
@@ -38,16 +38,16 @@
 #ifndef	_KERN_MACH_PARAM_H_
 #define _KERN_MACH_PARAM_H_
 
-#define THREAD_MAX	1024		/* Max number of threads */
+#define THREAD_MAX	64 * 1024		/* Max number of threads */
 #define THREAD_CHUNK	64		/* Allocation chunk */
 
-#define TASK_MAX	1024		/* Max number of tasks */
+#define TASK_MAX	64 * 1024		/* Max number of tasks */
 #define TASK_CHUNK	64		/* Allocation chunk */
 
-#define ACT_MAX		1024		/* Max number of acts */
+#define ACT_MAX		64 * 1024		/* Max number of acts */
 #define ACT_CHUNK	64		/* Allocation chunk */
 
-#define ACTPOOL_MAX	1024
+#define ACTPOOL_MAX	64 * 1024
 #define ACTPOOL_CHUNK	64
 
 #define PORT_MAX	((TASK_MAX * 3 + THREAD_MAX)	/* kernel */ \
Index: kern/zalloc.c
===================================================================
--- kern/zalloc.c.orig	2007-02-11 14:51:17.000000000 +0200
+++ kern/zalloc.c	2007-04-05 07:31:10.000000000 +0300
@@ -105,7 +105,7 @@ zone_t		zone_zone;	/* this is the zone c
 boolean_t	zone_ignore_overflow = TRUE;
 
 vm_map_t	zone_map = VM_MAP_NULL;
-vm_size_t	zone_map_size = 12 * 1024 * 1024;
+vm_size_t	zone_map_size = 16 * 1024 * 1024;
 
 /*
  *	The VM system gives us an initial chunk of memory.
Index: vm/vm_object.c
===================================================================
RCS file: /cvsroot/hurd/gnumach/vm/vm_object.c,v
retrieving revision 1.2.4.9
diff -u -p -r1.2.4.9 vm_object.c
--- vm/vm_object.c	1 Mar 2007 09:46:46 -0000	1.2.4.9
+++ vm/vm_object.c	20 Aug 2007 00:14:12 -0000
@@ -179,7 +179,7 @@ vm_object_t	kernel_object;
  */
 queue_head_t	vm_object_cached_list;
 int		vm_object_cached_count;
-int		vm_object_cached_max = 200;	/* may be patched*/
+int		vm_object_cached_max = 2000;	/* may be patched*/
 
 decl_simple_lock_data(,vm_object_cached_lock_data)
 
--- linux/dev/glue/block.c.orig	2007-12-30 15:55:04.000000000 +0000
+++ linux/dev/glue/block.c	2007-12-30 15:55:22.000000000 +0000
@@ -572,7 +572,7 @@
 }
 
 #define BH_Bounce	16
-#define MAX_BUF		VM_MAP_COPY_PAGE_LIST_MAX
+#define MAX_BUF		8
 
 /* Perform read/write operation RW on device DEV
    starting at *off to/from buffer *BUF of size *RESID.
--- vm/vm_map.h.orig	2007-12-30 15:56:22.000000000 +0000
+++ vm/vm_map.h	2007-12-30 15:56:27.000000000 +0000
@@ -226,7 +226,7 @@
  *		(returned) and an abort flag (abort if TRUE).
  */
 
-#define VM_MAP_COPY_PAGE_LIST_MAX	8
+#define VM_MAP_COPY_PAGE_LIST_MAX	64
 
 typedef struct vm_map_copy {
 	int			type;
